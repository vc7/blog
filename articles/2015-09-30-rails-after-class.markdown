---
layout: post
title: "Rails 課後心得"
date: 2015-09-30 10:20:14 +0800
comments: true
categories: ["Rails"] 
keywords: Rails, Bootstrap
description: "第二次上課的課後心得"
---

我本身是個 iOS 工程師，這次上課有個意外的收穫，也是一開始預料不到的。

在去年第一次上課的時候， iOS 和 Rails 都還沒有那麼熟悉，上完課還是有點懵懵懂懂。iOS 經過一年工作上的訓練、加上對 Rails 比較了解之後，意外發現 Rails 的一些架構概念，也可以在 iOS 開發中實現。

<!-- more -->

## 前導知識

在上課途中有幫助其他學員，也有發現一些事情，因此列一下上課前<strong>有了會比較好</strong>的技能：

- [Rails 101](http://growth.xdite.net/courses/rails-101) 一定要練熟，至少要五次以上，可以的話，所有的 code 都要自己打過一次。
- 需要熟練 rails 相關基本的終端機指令
- 需要了解 git 的基本功能 - commit, branch ... etc.
- 並且要把以上的過程中不懂的地方記錄下來，以便未來備查。

其他：[笨方法學 Ruby](http://lrthw.github.io/)

## 背景

今年是第二次上 Xdite 的 Rails 課程，相對於去年第一次上，今年對於 Rails 的概念變得更加熟悉，上課起來也順暢多了。

這次的目的也和去年不太一樣：一年多來接觸到比較大的 server team, 開始接觸公司內部的 API 變化的過程產生了很多疑問， 因此除了建立網站，還想要更深入了解，及自己嘗試這個部分的實作。

## 上課的進程

### User Story

> User Story 就是從使用者的角度，用短又簡單的敘述來描述一個功能

上課的核心概念就是要讓我們知道，如何將我們的想法，化成可實行的 Rails 產品。

不同於一般的 Rails 課程，在課程一開始，反而是先從怎麼撰寫 user story, 再訓練切票的能力：讓我們知道該怎麼把我們的想法具體寫出來、再將各個 story 細分之後，除了可以具體化需要進行的項目，也可以儘早地發現並排除可能的障礙。

#### User Story 的格式：

```
身為 [一個角色] ，我想要達成 [目的] ，我需要做 [什麼事]
``` 

寫下 User Story 之後，更能夠清楚的了解我這個網站到底有哪些功能，在這個情形之下，就有辦法去幫自己的代辦事項排出優先順序。

#### TODO

在去年第一次的課程中，我們有被引導使用 TODO ，把我們待做的功能列出來，達到基本的專案管理功能。今年雖然沒有提到，我也有這樣做，管理我待完成的課程練習和作業。

格式像這樣：

```
[ ] 使用者可以在前台瀏覽產品
[ ] 使用者可以在前台把產品加入購物車
  [ ] 使用者可以調整購物車中產品的數量
...
```

當完成某項功能的時候，就在前面的空白中打勾即可：

```
[v] 使用者可以在前台瀏覽產品
[ ] 使用者可以在前台把產品加入購物車
  [ ] 使用者可以調整購物車中產品的數量
...
```

### 實作

在上課的過程，則是透過實作，逐漸的將常見的功能實作出來，搭配常用的 gem 來達成這些功能。

透過在這個階段反覆實作，對於 ruby 和 Rails 的寫法和架構也更加熟練，逐漸建構起手指對於 ruby 的記憶

### 把程式碼變漂亮

當程式碼寫多的時候，就有可能會變醜，變醜之後，把他變漂亮就是義務。

這時候就有提到在各個地方該怎麼整理：

- 加上 before filters</strong>, 減少重複撰寫程式碼
- <strong>繼承：</strong>把多個重複的 before filters 抽出來，獨立於一個 parent class 來繼承
- <strong>混用：</strong>若是不想要用繼承，可以使用 module, mixin 的方式，來共用同一種程式碼
- <strong>Service Object ：</strong>若是業務邏輯過度肥大，則需要透過 service object 來統一處理

### 頁面簡化

#### View Helper

就像是 PHP 的惡習， 在 erb 裡面也會有混雜邏輯和 ruby code 的情形發生，這時候就可以將邏輯拆出成 view helper ，一來邏輯會比較清楚、修改時也比較容易

#### Partial - 拆解 HTML 的 code

在 view 裡面當然也會有大量重複的 HTML code ，或是特殊職責的 HTML (如 GA) ，這時候就可以利用 Partial 的技巧，來管理 HTML 、並方便修改。

到這裡上課的時候發現提供的反例截圖，就是去年我在不懂時硬幹之下寫出來的誤用，當時就把拆解注意事項謹記地更加深刻

## 網站完成後

這個部分也是一般課程看不到的內容，除了實作網站出來，在結束後也會提到如何利用 Growth Hack 的技巧，幫助網站成長；還有優化網站的效能及安全性的技巧。

接著在課程中因為有大量的作業，和完整的作品可以作為履歷和部落格的材料。在作業中也有大量需要我們自己了解的技術細節。透過自己尋找資料、用自己的話寫出來之後，印象可以更加深刻。

課程最後也有替大家解惑、甚至是如何完成履歷、如何找工作，幫助真的很大。

## 心法

在接觸了數個不同的語言之後，發現在架構、重構方法的核心心法基本上是差不多的。在不同的語言之間，保留各自原生的 pattern 之下，也可以互相借鑑設計的方法。

最後，還是要靠大量的練習和抽換程式碼，讓身體可以記住其中的技巧、內化之後才能讓技術更加熟練。

如果想要學習如何從入門到可以獨立擔當，還是<strong>去聽吧！</strong> >> 
<center><a href="http://www.growthschool.com/courses/rails_ecommerce" target="_blank" style="margin: 20px;padding: 10px 20px; border-radius:4px; background-color:tomato; text-decoration:none; color: white;">四周晉升 Rails 即戰力 →</a></center>
<br><br>